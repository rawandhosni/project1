name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
  
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag project1
      
      
      
  Push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: rawanda
          password: rawanda123
          repository: rawanda/project1 
          tag_with_ref: true
                  
      - name: 'Write Config & Key Files'
        run: |
           mkdir ~/.oci
           echo "[DEFAULT]" >> ~/.oci/config
           echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
           echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
           echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
           echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
           echo "key_file=~/.oci/key.pem" >> ~/.oci/config
           echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
           
      - name: 'Install OCI CLI'
        env: 
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        run: |
            curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
            chmod +x install.sh
            ./install.sh --accept-all-defaults
            echo "::add-path::/home/runner/bin"
            exec -l $SHELL
              
      - name: 'Fix Config File Permissions'
        run: |
           oci setup repair-file-permissions --file /home/runner/.oci/config
           oci setup repair-file-permissions --file /home/runner/.oci/key.pem
        
      - name: 'Download the KUBECONFIG'
        run: |
           mkdir -p ~/.kube
           oci ce cluster create-kubeconfig --cluster-id ${{ secrets.OKE_OCID }} --file ~/.kube/config --region ${{secrets.OCI_REGION}} --token-version 2.0.0 
           export KUBECONFIG=~/.kube/config
           name: 'Deploy the API on OKE'
           run: |
            kubectl delete deployment $DEPLOYMENT_NAME
            kubectl create deployment $DEPLOYMENT_NAME --image=$IMAGE_NAME --dry-run -o yaml > deployment.yaml
            kubectl apply -f deployment.yaml
            kubectl rollout status deployment/$DEPLOYMENT_NAME
           kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
           kubectl apply -f service.yaml
           kubectl get services -o wide
